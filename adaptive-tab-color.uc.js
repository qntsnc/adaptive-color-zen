/* Adaptive Tab Bar Color for Zen Browser */
/* –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –º–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç–∞ –ø–∞–Ω–µ–ª–∏ –≤–∫–ª–∞–¥–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ */

(function() {
    'use strict';
    
    console.log('üé® Adaptive Tab Color: Script starting...');
    
    let currentColors = {
        bg: '',
        text: '',
        border: ''
    };
    
    let colorUpdateInterval;
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    const CONFIG = {
        UPDATE_INTERVAL: 5000, // 5 —Å–µ–∫—É–Ω–¥
        QUICK_TEST_DURATION: 2000, // 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∞
        HEADER_SELECTORS: [
            'header',
            'nav',
            '.navbar',
            '.header',
            '.top-bar',
            '.site-header',
            '.page-header',
            '.masthead',
            '.banner',
            '[role="banner"]',
            '.hero',
            '.hero-section'
        ],
        MIN_ELEMENT_SIZE: 100, // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞
        DEBUG: true
    };
    
    function debugLog(message, data = null) {
        if (CONFIG.DEBUG) {
            console.log(`üé® Adaptive Tab Color: ${message}`, data || '');
        }
    }
    
    function rgbToHex(rgbString) {
        if (!rgbString || rgbString === 'transparent') return null;
        
        const match = rgbString.match(/rgb\((\d+),\s*(\d+),\s*(\d+)\)/);
        if (!match) return rgbString;
        
        const r = parseInt(match[1]);
        const g = parseInt(match[2]);
        const b = parseInt(match[3]);
        
        return `#${((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)}`;
    }
    
    function getContrastColor(hexColor) {
        if (!hexColor) return '#000000';
        
        // –£–±–∏—Ä–∞–µ–º # –µ—Å–ª–∏ –µ—Å—Ç—å
        hexColor = hexColor.replace('#', '');
        
        const r = parseInt(hexColor.substr(0, 2), 16);
        const g = parseInt(hexColor.substr(2, 2), 16);
        const b = parseInt(hexColor.substr(4, 2), 16);
        
        // –í—ã—á–∏—Å–ª—è–µ–º —è—Ä–∫–æ—Å—Ç—å
        const brightness = (r * 299 + g * 587 + b * 114) / 1000;
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–ª—ã–π –∏–ª–∏ —á–µ—Ä–Ω—ã–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è—Ä–∫–æ—Å—Ç–∏
        return brightness > 128 ? '#000000' : '#ffffff';
    }
    
    function applyColors(bgColor, textColor) {
        if (!bgColor) return;
        
        const hexBgColor = rgbToHex(bgColor);
        const finalTextColor = textColor || getContrastColor(hexBgColor);
        
        debugLog('–ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞:', { bg: hexBgColor, text: finalTextColor });
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        document.documentElement.style.setProperty('--adaptive-bg-color', hexBgColor);
        document.documentElement.style.setProperty('--adaptive-text-color', finalTextColor);
        document.documentElement.style.setProperty('--adaptive-border-color', hexBgColor);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç–∏–ª–µ–π
        const elementsToStyle = [
            '#TabsToolbar',
            '.zen-tabs-container',
            '#nav-bar',
            '.zen-nav-bar',
            '.zen-sidebar',
            '#sidebar-box',
            '#urlbar'
        ];
        
        elementsToStyle.forEach(selector => {
            const elements = document.querySelectorAll(selector);
            elements.forEach(element => {
                element.setAttribute('adaptive-color', 'true');
                debugLog(`–î–æ–±–∞–≤–ª–µ–Ω –∞—Ç—Ä–∏–±—É—Ç adaptive-color –¥–ª—è ${selector}`);
            });
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–≤–µ—Ç–∞
        currentColors.bg = hexBgColor;
        currentColors.text = finalTextColor;
        currentColors.border = hexBgColor;
    }
    
    function clearAdaptiveColors() {
        document.documentElement.style.removeProperty('--adaptive-bg-color');
        document.documentElement.style.removeProperty('--adaptive-text-color');
        document.documentElement.style.removeProperty('--adaptive-border-color');
        
        const adaptiveElements = document.querySelectorAll('[adaptive-color="true"]');
        adaptiveElements.forEach(element => {
            element.removeAttribute('adaptive-color');
        });
        
        debugLog('–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ –æ—á–∏—â–µ–Ω—ã');
    }
    
    function updateColorsFromCurrentTab() {
        const currentBrowser = gBrowser.selectedBrowser;
        if (!currentBrowser || !currentBrowser.contentDocument) {
            debugLog('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤');
            return;
        }
        
        debugLog('–û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ —Å —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏...');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ content script
        currentBrowser.messageManager.sendAsyncMessage('AdaptiveTabColor:ExtractColors');
    }
    
    function startPeriodicColorUpdate() {
        debugLog('–ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –∫–∞–∂–¥—ã–µ', CONFIG.UPDATE_INTERVAL + '–º—Å');
        
        colorUpdateInterval = setInterval(() => {
            updateColorsFromCurrentTab();
        }, CONFIG.UPDATE_INTERVAL);
    }
    
    function stopPeriodicColorUpdate() {
        if (colorUpdateInterval) {
            clearInterval(colorUpdateInterval);
            colorUpdateInterval = null;
            debugLog('–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        }
    }
    
    // Content script –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤
    const contentScript = `
        data:,
        const { Services } = ChromeUtils.import('resource://gre/modules/Services.jsm');
        
        const CONFIG = {
            HEADER_SELECTORS: [
                'header',
                'nav',
                '.navbar',
                '.header',
                '.top-bar',
                '.site-header',
                '.page-header',
                '.masthead',
                '.banner',
                '[role="banner"]',
                '.hero',
                '.hero-section'
            ],
            MIN_ELEMENT_SIZE: 100,
            DEBUG: true
        };
        
        function debugLog(message, data = null) {
            if (CONFIG.DEBUG) {
                console.log('üé® Content Script: ' + message, data || '');
            }
        }
        
        function extractPageBackgroundColor() {
            debugLog('–ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π —Ü–≤–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º body
            const body = content.document.body;
            if (body) {
                const bodyStyle = content.getComputedStyle(body);
                const bodyBg = bodyStyle.backgroundColor;
                
                if (bodyBg && bodyBg !== 'rgba(0, 0, 0, 0)' && bodyBg !== 'transparent') {
                    debugLog('–ù–∞–π–¥–µ–Ω —Ñ–æ–Ω–æ–≤—ã–π —Ü–≤–µ—Ç body:', bodyBg);
                    return bodyBg;
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º html
            const html = content.document.documentElement;
            if (html) {
                const htmlStyle = content.getComputedStyle(html);
                const htmlBg = htmlStyle.backgroundColor;
                
                if (htmlBg && htmlBg !== 'rgba(0, 0, 0, 0)' && htmlBg !== 'transparent') {
                    debugLog('–ù–∞–π–¥–µ–Ω —Ñ–æ–Ω–æ–≤—ã–π —Ü–≤–µ—Ç html:', htmlBg);
                    return htmlBg;
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            const containers = content.document.querySelectorAll('main, #main, .main, .container, .wrapper, .page');
            for (let container of containers) {
                const containerStyle = content.getComputedStyle(container);
                const containerBg = containerStyle.backgroundColor;
                
                if (containerBg && containerBg !== 'rgba(0, 0, 0, 0)' && containerBg !== 'transparent') {
                    debugLog('–ù–∞–π–¥–µ–Ω —Ñ–æ–Ω–æ–≤—ã–π —Ü–≤–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:', containerBg);
                    return containerBg;
                }
            }
            
            debugLog('–§–æ–Ω–æ–≤—ã–π —Ü–≤–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–ª—ã–π');
            return '#ffffff';
        }
        
        function extractColorsFromPage() {
            debugLog('–ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
            
            let headerColor = null;
            
            // –ò—â–µ–º —Ü–≤–µ—Ç –≤ —à–∞–ø–∫–µ —Å–∞–π—Ç–∞
            for (let selector of CONFIG.HEADER_SELECTORS) {
                const elements = content.document.querySelectorAll(selector);
                
                for (let element of elements) {
                    const rect = element.getBoundingClientRect();
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏ –ø–æ–∑–∏—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞
                    if (rect.width >= CONFIG.MIN_ELEMENT_SIZE && 
                        rect.height >= 30 && 
                        rect.top <= 200) { // —ç–ª–µ–º–µ–Ω—Ç –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                        
                        const style = content.getComputedStyle(element);
                        const bgColor = style.backgroundColor;
                        
                        if (bgColor && bgColor !== 'rgba(0, 0, 0, 0)' && bgColor !== 'transparent') {
                            debugLog('–ù–∞–π–¥–µ–Ω —Ü–≤–µ—Ç —à–∞–ø–∫–∏ –≤ ' + selector + ':', bgColor);
                            headerColor = bgColor;
                            break;
                        }
                    }
                }
                
                if (headerColor) break;
            }
            
            // –ï—Å–ª–∏ —à–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –±–µ—Ä–µ–º —Ñ–æ–Ω–æ–≤—ã–π —Ü–≤–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if (!headerColor) {
                debugLog('–®–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ–Ω–æ–≤—ã–π —Ü–≤–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
                headerColor = extractPageBackgroundColor();
            }
            
            return headerColor;
        }
        
        addMessageListener('AdaptiveTabColor:ExtractColors', function(message) {
            debugLog('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤');
            
            try {
                const extractedColor = extractColorsFromPage();
                debugLog('–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ü–≤–µ—Ç:', extractedColor);
                
                sendAsyncMessage('AdaptiveTabColor:ColorsExtracted', {
                    bgColor: extractedColor,
                    url: content.location.href
                });
            } catch (error) {
                debugLog('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ü–≤–µ—Ç–æ–≤:', error);
                sendAsyncMessage('AdaptiveTabColor:ColorsExtracted', {
                    bgColor: '#ffffff',
                    url: content.location.href
                });
            }
        });
        
        debugLog('Content script –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è:', content.location.href);
    `;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    function init() {
        debugLog('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Adaptive Tab Color...');
        
        // –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç - –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã
        debugLog('–ó–∞–ø—É—Å–∫–∞–µ–º –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å –∫—Ä–∞—Å–Ω—ã–º —Ü–≤–µ—Ç–æ–º...');
        applyColors('#ff0000', '#ffffff');
        
        setTimeout(() => {
            debugLog('–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É –∏–∑–≤–ª–µ—á–µ–Ω–∏—é —Ü–≤–µ—Ç–æ–≤');
            
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º content script
            try {
                Services.mm.loadFrameScript(contentScript, true);
                debugLog('Content script –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
            } catch (error) {
                debugLog('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ content script:', error);
            }
            
            // –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç content script
            Services.mm.addMessageListener('AdaptiveTabColor:ColorsExtracted', function(message) {
                const data = message.data;
                debugLog('–ü–æ–ª—É—á–µ–Ω—ã —Ü–≤–µ—Ç–∞ –æ—Ç content script:', data);
                
                if (data.bgColor) {
                    applyColors(data.bgColor);
                } else {
                    debugLog('–¶–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω, –ø—Ä–∏–º–µ–Ω—è–µ–º –±–µ–ª—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
                    applyColors('#ffffff');
                }
            });
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤
            updateColorsFromCurrentTab();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            startPeriodicColorUpdate();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –≤–∫–ª–∞–¥–∫–∏
            gBrowser.tabContainer.addEventListener('TabSelect', () => {
                debugLog('–°–º–µ–Ω–∏–ª–∞—Å—å –≤–∫–ª–∞–¥–∫–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞...');
                setTimeout(updateColorsFromCurrentTab, 100);
            });
            
            debugLog('Adaptive Tab Color –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
        }, CONFIG.QUICK_TEST_DURATION);
    }
    
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ
    function cleanup() {
        debugLog('–í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É...');
        stopPeriodicColorUpdate();
        clearAdaptiveColors();
        
        try {
            Services.mm.removeMessageListener('AdaptiveTabColor:ColorsExtracted');
            Services.mm.removeDelayedFrameScript(contentScript);
        } catch (error) {
            debugLog('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', error);
        }
    }
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞
    if (gBrowserInit.delayedStartupFinished) {
        init();
    } else {
        let delayedListener = (subject, topic) => {
            if (topic == 'browser-delayed-startup-finished' && subject == window) {
                Services.obs.removeObserver(delayedListener, topic);
                init();
            }
        };
        Services.obs.addObserver(delayedListener, topic);
    }
    
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞
    window.addEventListener('unload', cleanup);
    
})(); 